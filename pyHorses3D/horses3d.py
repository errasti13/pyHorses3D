# horses3d.py

import subprocess
import sys
import os
import glob
import platform
from .control import Horses3DControl
from .plot import Horses3DPlot
from .mesh import Horses3DMesh
from .solution import Horses3DSolution

class Horses3D:
    """
    Main class for interfacing with the Horses3D CFD solver.
    
    This class provides methods to run the Horses3D solver, manage control files,
    and access solution, mesh, and plotting capabilities.
    
    Attributes:
        control (Horses3DControl): Object to manage solver control parameters
        plot (Horses3DPlot): Object to create visualizations
        mesh (Horses3DMesh): Object to manage mesh data
        solution (Horses3DSolution): Object to manage solution data
        horses3dPath (str): Path to Horses3D executable
        solutionFileNames (list): List of solution file names
        meshFileNames (list): List of mesh file names
    """
    def __init__(self, solverPath, controlFilePath=None):
        """
        Initialize the Horses3D interface.
        
        Args:
            solverPath (str): Path to the Horses3D solver executable
            controlFilePath (str, optional): Path to the control file
        """
        self.control = Horses3DControl(controlFilePath)
        self.plot = Horses3DPlot()
        self.mesh = Horses3DMesh()
        self.solution = Horses3DSolution()

        self.horses3dPath = solverPath
        self.solutionFileNames = []
        self.meshFileNames = []

    def runHorses3D(self, plotResiduals=False):
        """
        Run the Horses3D solver with the current control file.
        
        This method creates a temporary control file, runs the solver,
        and optionally plots the residuals after completion.
        
        Args:
            plotResiduals (bool, optional): Whether to plot residuals after the simulation
                                           completes. Defaults to False.
        """
        try:
            config_file = self.control.saveControlFile('control_generated.control')
            # Handle Windows/WSL path conversion if needed
            if platform.system() == 'Windows' and self.horses3dPath.startswith('/mnt/'):
                # Convert WSL path to Windows path if needed
                drive_letter = self.horses3dPath.split('/')[2]
                wsl_path = self.horses3dPath[self.horses3dPath.find('/mnt/')+5:]
                win_path = f"{drive_letter}:{wsl_path.replace('/', '\\')}"
                command = f"{win_path} {config_file}"
            else:
                command = f"{self.horses3dPath} {config_file}"
                
            print(f"Running command: {command}")
            process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

            with process.stdout as stdout, process.stderr as stderr:
                for line in stdout:
                    sys.stdout.write(line)
                for line in stderr:
                    sys.stderr.write(line)

            process.wait()

            if plotResiduals:
                self.plot_residuals()
        except subprocess.CalledProcessError as e:
            print(f"Error during simulation: {e}")
        except Exception as e:
            print(f"Unexpected error: {e}")
        finally:
            control_file_path = os.path.join(os.getcwd(), 'control_generated.control')
            if os.path.exists(control_file_path):
                os.remove(control_file_path)

    def plot_residuals(self):
        """
        Plot the residuals from the simulation.
        
        This method reads the residuals file generated by the simulation
        and plots them using the Horses3DPlot object.
        """
        try:
            residualsFileName = os.path.splitext(self.control.parameters["solution file name"])[0][1:] + '.residuals'
            if os.path.exists(residualsFileName):
                with open(residualsFileName, 'r') as file:
                    residuals_data = file.readlines()
                self.plot.plotResiduals(residuals_data)
            else:
                print(f"Residuals file not found: {residualsFileName}")
        except Exception as e:
            print(f"Error plotting residuals: {e}")

    def getSolutionFileNames(self):
        """
        Get the names of solution files generated by the simulation.
        
        Returns:
            list: List of solution file names
        """
        solution_file_name = self.control.parameters["solution file name"]
        base_name = os.path.splitext(solution_file_name)[0][1:]
        if base_name:
            pattern = f"{base_name}_*.hsol"
            matching_files = glob.glob(pattern)

            if not matching_files:
                raise FileNotFoundError(f"No matching hsol files found for {solution_file_name}")
    
            self.solutionFileNames.extend(matching_files)
        return self.solutionFileNames


    def getHMeshFileName(self):
        """
        Get the names of mesh files used by the simulation.
        
        Returns:
            list: List of mesh file names
        """
        solution_file_name = self.control.parameters.get("solution file name")

        base_name = os.path.splitext(solution_file_name)[0]
        extracted_name = base_name.split('/')[-1]
        hMeshFile = "MESH/" + extracted_name

        pattern = f"{hMeshFile}_*.hmesh"
        matching_files = glob.glob(pattern)
        
        if not matching_files:
            raise FileNotFoundError(f"No matching hmesh files found for {solution_file_name}")

        self.meshFileNames.extend(matching_files)
        return self.meshFileNames


